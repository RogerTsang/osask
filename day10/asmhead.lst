     1 00000000                                 ; haribote-os
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4  = 00280000                              BOTPAK  EQU 0x00280000
     5  = 00100000                              DSKCAC  EQU 0x00100000
     6  = 00008000                              DSKCAC0 EQU 0x00008000
     7 00000000                                 
     8 00000000                                 ; Boot info
     9  = 00000FF0                              CYLS    EQU 0x0ff0 ; cylinder number
    10  = 00000FF1                              LEDS    EQU 0x0ff1 ; keyboard leds
    11  = 00000FF2                              VMODE   EQU 0x0ff2 ; video mode
    12  = 00000FF4                              SCRNX   EQU 0x0ff4 ; screen rander x axis
    13  = 00000FF6                              SCRNY   EQU 0x0ff6 ; screen rander y axis
    14  = 00000FF8                              VRAM    EQU 0x0ff8 ; video ram
    15 00000000                                 
    16 00000000                                     ; program entry in memory location
    17                                              ORG 0xc200
    18 0000C200                                 
    19 0000C200                                     ; video init
    20 0000C200 B4 00                               MOV AH, 0x00 ;set video mode
    21 0000C202 B0 13                               MOV AL, 0x13 ;VGA 320x200x8
    22 0000C204 CD 10                               INT 0x10
    23 0000C206                                 
    24 0000C206 C6 06 0FF2 08                       MOV BYTE [VMODE], 8
    25 0000C20B C7 06 0FF4 0140                     MOV WORD [SCRNX], 320
    26 0000C211 C7 06 0FF6 00C8                     MOV WORD [SCRNY], 200
    27 0000C217 66 C7 06 0FF8 000A0000              MOV DWORD [VRAM], 0x000a0000
    28 0000C220                                 
    29 0000C220                                     ; keyboard init
    30 0000C220 B4 02                               MOV AH, 0x02
    31 0000C222 CD 16                               INT 0x16
    32 0000C224 A2 0FF1                             MOV [LEDS], AL
    33 0000C227                                 
    34 0000C227                                     ; Disable CPU interrupt
    35 0000C227 B0 FF                               MOV AL, 0xff
    36 0000C229 E6 21                               OUT 0x21, AL ; io_out(PIC0_IMR, 0xff)
    37 0000C22B 90                                  NOP
    38 0000C22C                                 
    39 0000C22C E6 A1                               OUT 0xa1, AL ; io_out(PIC1_IMR, 0xff)
    40 0000C22E FA                                  CLI          ; Disable CPU interrupt
    41 0000C22F                                 
    42 0000C22F                                     ; Setup A20GATE to enable access > 1MB mem
    43 0000C22F E8 00B5                             CALL waitkbdout
    44 0000C232 B0 D1                               MOV AL, 0xd1 
    45 0000C234 E6 64                               OUT 0x64, AL ; io_out(PORT_KEYCMD, KEYCMD_WRITE_OUTPORT);
    46 0000C236 E8 00AE                             CALL waitkbdout
    47 0000C239 B0 DF                               MOV AL, 0xdf ; 0xdf is a port attached to keyboard controller
    48 0000C23B E6 60                               OUT 0x60, AL ; io_out(PORT_KEYDAT, KBC_OUTPORT_A20G_ENABLE);
    49 0000C23D E8 00A7                             CALL waitkbdout
    50 0000C240                                 
    51 0000C240                                 [INSTRSET "i486p"] ; Enable 'LGDT' 'EAX' 'CR0' keywords
    52 0000C240 0F 01 16 C32A                       LGDT [GDTR0]   ; temporary GDT
    53 0000C245 0F 20 C0                            MOV EAX, CR0
    54 0000C248 66 25 7FFFFFFF                      AND EAX, 0x7fffffff ; bit31 => 0 (disable paging)
    55 0000C24E 66 83 C8 01                         OR EAX, 0x00000001  ; bit0  => 1 (protection mode => virtual address)
    56 0000C252                                     ; protect: prevent application from overriding segment permission
    57 0000C252                                 
    58 0000C252 0F 22 C0                            MOV CR0, EAX   ; write to status register Control Register 0
    59 0000C255 EB 00                               JMP pipelineflush
    60 0000C257                                 
    61 0000C257                                 pipelineflush:
    62 0000C257 B8 0008                             MOV AX, 1*8
    63 0000C25A 8E D8                               MOV DS, AX
    64 0000C25C 8E C0                               MOV ES, AX
    65 0000C25E 8E E0                               MOV FS, AX
    66 0000C260 8E E8                               MOV GS, AX
    67 0000C262 8E D0                               MOV SS, AX
    68 0000C264                                 
    69 0000C264 66 BE 0000C330                      MOV ESI, bootpack
    70 0000C26A 66 BF 00280000                      MOV EDI, BOTPAK
    71 0000C270                                     ; code segment register is changed at the end
    72 0000C270                                     ; to prevent code segment corruption
    73 0000C270 66 B9 00020000                      MOV ECX, 512*1024/4
    74 0000C276 E8 0077                             CALL memcpy
    75 0000C279                                 
    76 0000C279                                 ; transfer disk data to memory
    77 0000C279 66 BE 00007C00                      MOV ESI, 0x7c00
    78 0000C27F 66 BF 00100000                      MOV EDI, DSKCAC
    79 0000C285 66 B9 00000080                      MOV ECX, 512/4
    80 0000C28B E8 0062                             CALL memcpy
    81 0000C28E                                 
    82 0000C28E                                 ; all the remaining blocks
    83 0000C28E 66 BE 00008200                      MOV ESI, DSKCAC0+512 ; source
    84 0000C294 66 BF 00100200                      MOV EDI, DSKCAC+512  ; destination
    85 0000C29A 66 B9 00000000                      MOV ECX, 0
    86 0000C2A0 8A 0E 0FF0                          MOV CL, BYTE [CYLS]
    87 0000C2A4 66 69 C9 00001200                   IMUL ECX, 512*18*2/4 ; cylinder unit -> byte unit / 4
    88 0000C2AB                                 
    89 0000C2AB 66 81 E9 00000080                   SUB ECX, 512/4 ; don't copy IPL
    90 0000C2B2 E8 003B                             CALL memcpy; void memcpy(source ESI, destination EDI, size ECX);
    91 0000C2B5                                 
    92 0000C2B5                                 ;start BOOTPACK
    93 0000C2B5 66 BB 00280000                      MOV EBX, BOTPAK
    94 0000C2BB 67 66 8B 4B 10                      MOV ECX, [EBX+16]
    95 0000C2C0 66 83 C1 03                         ADD ECX, 3
    96 0000C2C4 66 C1 E9 02                         SHR ECX, 2
    97 0000C2C8 74 10                               JZ skip
    98 0000C2CA                                 
    99 0000C2CA 67 66 8B 73 14                      MOV ESI, [EBX+20]
   100 0000C2CF 66 01 DE                            ADD ESI, EBX
   101 0000C2D2 67 66 8B 7B 0C                      MOV EDI, [EBX+12]
   102 0000C2D7 E8 0016                             CALL memcpy
   103 0000C2DA                                 
   104 0000C2DA                                 skip:
   105 0000C2DA 67 66 8B 63 0C                      MOV ESP, [EBX+12]
   106 0000C2DF 66 EA 0000001B 0010                 JMP DWORD 2*8:0X0000001b
   107 0000C2E7                                 
   108 0000C2E7                                 waitkbdout:
   109 0000C2E7 E4 64                               IN AL, 0x64
   110 0000C2E9 24 02                               AND AL, 0x02
   111 0000C2EB E4 60                               IN AL, 0x60 ; read from keyboard and mouse
   112 0000C2ED 75 F8                               JNZ waitkbdout ; if (PORT 0x64 AND 0x02) != 0 (NOTREADY bit is set)
   113 0000C2EF C3                                  RET
   114 0000C2F0                                 
   115 0000C2F0                                 memcpy:
   116 0000C2F0 67 66 8B 06                         MOV EAX, [ESI] ;copy source [ESI] to temp EAX
   117 0000C2F4 66 83 C6 04                         ADD ESI, 4 ;increment source addr
   118 0000C2F8 67 66 89 07                         MOV [EDI], EAX ;paste dest [EDI]
   119 0000C2FC 66 83 C7 04                         ADD EDI, 4 ;increment dest addr
   120 0000C300 66 83 E9 01                         SUB ECX, 1 ;decrease size
   121 0000C304 75 EA                               JNZ memcpy 
   122 0000C306 C3                                  RET ;return when finish
   123 0000C307 00 00 00 00 00 00 00 00 00          alignb 16
   124 0000C310                                 
   125 0000C310                                 GDT0:
   126 0000C310 00 00 00 00 00 00 00 00             RESB 8
   127 0000C318 FFFF 0000 9200 00CF                 DW 0xffff, 0x0000, 0x9200, 0x00cf ; rw-
   128 0000C320 FFFF 0000 9A28 0047                 DW 0xffff, 0x0000, 0x9a28, 0x0047 ; --x
   129 0000C328 0000                                DW 0
   130 0000C32A                                 
   131 0000C32A                                 GDTR0:
   132 0000C32A 0017                                DW 8*3-1
   133 0000C32C 0000C310                            DD GDT0
   134 0000C330                                 
   135 0000C330                                     alignb 16
   136 0000C330                                 
   137 0000C330                                 bootpack:
